from pico2d import *

# 2. 이벤트 정의
# RD, LD, RU, LU = 0, 1, 2, 3
RD, LD, RU, LU = range(4)

# 키 입력확인을 단순화 시켜서 이벤트로 해석
key_event_table = {
    (SDL_KEYDOWN, SDLK_RIGHT): RD,
    (SDL_KEYDOWN, SDLK_LEFT) : LD,
    (SDL_KEYUP, SDLK_RIGHT)  : RU,
    (SDL_KEYUP, SDLK_LEFT)   : LU
}


# 1. 상태 정리
class IDLE:
    def enter(self): # 상태 들어갈떄 정하는 액션
        self.dir = 0
        pass

    @staticmethod
    def exit(self): # 상태를 나올 때 정하는 액션, 고개 들기
        pass

    @staticmethod
    def do(self): # 상태에 있을 때 지속적으로 행하는 액션, 숨쉬기
        self.frame = (self.frame +1) % 8
        pass

    def draw(self):
        if self.face_dir == 1:
            self.image.clip_draw(self.frame * 100, 300, 100, 100, self.x, self.y)
        else:
            self.image.clip_draw(self.frame * 100, 200, 100, 100, self.x, self.y)
        pass

class RUN:
    @staticmethod
    def enter(self):
        pass

    @staticmethod
    def exit(self):
        self.face_dir()
        pass

    @staticmethod
    def do(self):
        pass

    @staticmethod
    def draw(self):
        pass


# 3. 상태 변환 기술
next_state = {
    IDLE : {RU: RUN,  LU: RUN,  RD: RUN,  LD: RUN},
    RUN  : {RU: IDLE, LU: IDLE, RD: IDLE, LD: IDLE}
}


class Boy:

    def handle_event(self, event):
        if(event.type, event.key) in key_event_table:
            key_event = key_event_table[(event.type, event.key)]
            self.add_event(key_event)


        # if event.type == SDL_KEYDOWN:
        #     match event.key:
        #         case pico2d.SDLK_LEFT:
        #             boy.dir -= 1
        #         case pico2d.SDLK_RIGHT:
        #             boy.dir += 1
        # elif event.type == SDL_KEYUP:
        #     match event.key:
        #         case pico2d.SDLK_LEFT:
        #             boy.dir += 1
        #             boy.face_dir = -1
        #         case pico2d.SDLK_RIGHT:
        #             boy.dir -= 1
        #             boy.face_dir = 1
    def __init__(self):
        self.x, self.y = 0, 90
        self.frame = 0
        self.dir, self.face_dir = 0, 1
        self.image = load_image('animation_sheet.png')

        self.q = [] #이벤트 큐 초기화
        self.cur_state = IDLE
        self.cur_state.enter() # 초기 상태의 entry 액션 수행

    def update(self):
        self.cur_state.do() # 현재 상태의 do 액션 수행

        # 이벤트를 확인해서 이벤트가 있으면 이벤트 변환 처리
        if self.q:#큐에 이벤트가 있으면, 이벤트가 발생했으면,
            event = self.q.pop()
            self.cur_state.exit(self) # 현재 상태를 나가야하고
            self.cur_state = next[self.cur_state][event] # 다음 상태를 구한다
            self.cur_state.enter(self, event)

        # self.frame = (self.frame + 1) % 8
        # self.x += self.dir * 1
        # self.x = clamp(0, self.x, 800)

    def draw(self):
        self.cur_state.draw()
        # if self.dir == -1:
        #     self.image.clip_draw(self.frame*100, 0, 100, 100, self.x, self.y)
        # elif self.dir == 1:
        #     self.image.clip_draw(self.frame*100, 100, 100, 100, self.x, self.y)
        # else:




















from pico2d import *

#이벤트 정의
RD, LD, RU, LU,TIMER = range(5)

#키입력확인을 단순화 시켜서 이벤트로 해석
key_event_table = {
    (SDL_KEYDOWN, SDLK_RIGHT): RD,
    (SDL_KEYDOWN, SDLK_LEFT) : LD,
    (SDL_KEYUP, SDLK_RIGHT)  : RU,
    (SDL_KEYUP, SDLK_LEFT)   : LU
}

class IDLE:
    #@staticmethod
    def enter(self,event): # 상태에 들어갈 때 행하는 액션
        print('enter idle')
        self.dir = 0
        self.timer = 1000
        pass

    #@staticmethod
    def exit(self): # 상태를 나올 때 행하는 액션
        print('exit idle')
        pass

   # @staticmethod
    def do(self): # 상태에 있을때 지속적으로 행하는 액션
        self.frame = (self.frame+1) % 8
        self.timer -= 1
        if self.timer ==0:
            self.add_event(TIMER) # 조금 더 객체 지향적
        pass

    #@staticmethod
    def draw(self):
        if self.face_dir == 1:
            self.image.clip_draw(self.frame * 100, 300, 100, 100, self.x, self.y)
        else:
            self.image.clip_draw(self.frame * 100, 200, 100, 100, self.x, self.y)

class RUN:
    @staticmethod
    def enter(self, event):
        print('run idle')
        # 방향을 결정 해야하는데 , 뭘 근거로 ? 어떤 키가 눌렸기때문에
        if event == RD:
            self.dir += 1
        elif event == LD:
            self.dir -= 1
        elif event == RU:
            self.dir -= 1
        elif event == LU:
            self.dir += 1
        pass

    @staticmethod
    def exit(self):  # 상태를 나올 때 행하는 액션
        print('run exit')
        self.face_dir = self.dir
        pass

    @staticmethod
    def do(self):  # 상태에 있을때 지속적으로 행하는 액션
        self.frame = (self.frame+1) % 8
        self.x += self.dir
        self.x = clamp(0, self.x, 800)

        pass

    #@staticmethod
    def draw(self):
        if self.dir == -1:
            self.image.clip_draw(self.frame*100, 0, 100, 100, self.x, self.y)
        elif self.dir == 1:
            self.image.clip_draw(self.frame*100, 100, 100, 100, self.x, self.y)


class SLEEP:
    #@staticmethod
    def enter(self,event): # 상태에 들어갈 때 행하는 액션
        print('enter idle')
        self.frame = 0
        pass

    #@staticmethod
    def exit(self): # 상태를 나올 때 행하는 액션
        print('exit idle')
        pass

   # @staticmethod
    def do(self): # 상태에 있을때 지속적으로 행하는 액션
        self.frame = (self.frame+1) % 8
        pass

    #@staticmethod
    def draw(self):
        if self.face_dir == -1:
            self.image.clip_composite_draw(self.frame * 100, 200, 100, 100,
                                           -3.141592/2,'',
                                           self.x+25, self.y-25,100,100)
        else: # 오른쪽 눕기
            self.image.clip_composite_draw(self.frame * 100, 200, 100, 100,
                                           3.141592/2,'',
                                           self.x+25, self.y-25,100,100)



# 실행 변황 기술
next_state = {
    SLEEP :{RD: RUN, LD:RUN, RU: RUN, LU: RUN},
    IDLE:  {RU: RUN, LU: RUN, RD: RUN, LD: RUN, TIMER :SLEEP},
    RUN:   {RU: IDLE, LU: IDLE, RD: IDLE, LD: IDLE}
}


class Boy:

    def sdd_event(self,event):
        self.q.insert(0,event)
    def handle_event(self,event):
        if (event.type, event.key) in key_event_table:
            key_event = key_event_table[(event.type, event.key)]
            self.event_que.insert(0,key_event)

    # if event.type == SDL_KEYDOWN:
        #    match event.key:
         #       case pico2d.SDLK_LEFT:
          #          self.dir -= 1
           #     case pico2d.SDLK_RIGHT:
            #        self.dir += 1

        #elif event.type == SDL_KEYUP:
         #   match event.key:
          #      case pico2d.SDLK_LEFT:
           #         self.dir += 1
            #        self.face_dir = -1
             #   case pico2d.SDLK_RIGHT:
              #      self.dir -= 1
               #     self.face_dir = 1

    def __init__(self):
        self.x, self.y = 0, 90
        self.frame = 0
        self.dir, self.face_dir = 0, 1
        self.image = load_image('animation_sheet.png')

        self.event_que = []
        self.cur_state = IDLE
        self.cur_state.enter(self, None)

    def update(self):
        #self.frame = (self.frame + 1) % 8
        #self.x += self.dir * 1
        #self.x = clamp(0, self.x, 800)
        self.cur_state.do(self)

        if self.event_que:
            event = self.event_que.pop()
            self.cur_state.exit(self)
            self.cur_state = next_state[self.cur_state][event]
            self.cur_state.enter(self, event)

    def draw(self):
        self.cur_state.draw(self)
